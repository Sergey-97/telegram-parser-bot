import asyncio
import logging
from pyrogram import Client
from database import get_last_messages, save_post, save_message, message_exists
from ai_processor import AIProcessor
from post_formatter import PostFormatter
from config import API_ID, API_HASH, TARGET_CHANNEL, BOT_TOKEN, SOURCE_CHANNELS

logger = logging.getLogger(__name__)

async def run_bot():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    logger.info("=" * 60)
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê - –†–ï–ê–õ–¨–ù–´–ô –ü–ê–†–°–ò–ù–ì")
    logger.info("=" * 60)
    
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return "‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    client = None
    try:
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        logger.info("1. üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±–æ—Ç–∞...")
        client = Client(
            "telegram_bot", 
            api_id=API_ID, 
            api_hash=API_HASH,
            bot_token=BOT_TOKEN,
            workdir="./"
        )
        
        await client.start()
        me = await client.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: @{me.username}")
        
        # –†–ï–ê–õ–¨–ù–´–ô –ü–ê–†–°–ò–ù–ì –ö–ê–ù–ê–õ–û–í
        logger.info("2. üîç –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê –ö–ê–ù–ê–õ–û–í...")
        all_parsed_messages = await parse_all_channels(client)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        ai_processor = AIProcessor()
        post_formatter = PostFormatter()
        
        if all_parsed_messages:
            logger.info(f"3. üß† –°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–ê –ù–ê –û–°–ù–û–í–ï {len(all_parsed_messages)} –†–ï–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô")
            structured_content = ai_processor.structure_content(all_parsed_messages, [])
        else:
            logger.info("3. üîÑ –ò–°–ü–û–õ–¨–ó–£–Æ –†–ï–ó–ï–†–í–ù–´–ô –ö–û–ù–¢–ï–ù–¢")
            recent_messages = get_last_messages(limit=10)
            if recent_messages:
                texts = [msg['text'] for msg in recent_messages if msg['text']]
                logger.info(f"   üìä –ò—Å–ø–æ–ª—å–∑—É—é {len(texts)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            else:
                texts = get_fallback_messages()
                logger.info("   üìù –ò—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            structured_content = ai_processor.structure_content(texts, [])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        post_content = post_formatter.format_structured_post(structured_content)
        save_post(post_content)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞
        logger.info("4. üì§ –û–¢–ü–†–ê–í–ö–ê –ü–û–°–¢–ê...")
        max_length = 4096
        if len(post_content) > max_length:
            post_content = post_content[:max_length-100] + "\n\n... (–ø–æ—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω)"
        
        await client.send_message(TARGET_CHANNEL, post_content)
        logger.info(f"‚úÖ –ü–û–°–¢ –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù –í –ö–ê–ù–ê–õ–ï {TARGET_CHANNEL}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        result_message = f"‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –†–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(all_parsed_messages)}"
        logger.info(f"üéØ –ò–¢–û–ì: {result_message}")
        
        return result_message
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        logger.error(f"üîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò: {traceback.format_exc()}")
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    finally:
        if client:
            await client.stop()

async def parse_all_channels(client):
    """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    all_messages = []
    total_new_messages = 0
    
    logger.info(f"üì° –ü–ê–†–°–ò–ù–ì {len(SOURCE_CHANNELS)} –ö–ê–ù–ê–õ–û–í:")
    
    for i, channel_url in enumerate(SOURCE_CHANNELS, 1):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
            if channel_url.startswith('https://t.me/'):
                channel_id = channel_url.replace('https://t.me/', '')
            elif channel_url.startswith('@'):
                channel_id = channel_url[1:]
            else:
                channel_id = channel_url
            
            logger.info(f"   {i}. üîç –ü–∞—Ä—Å–∏–º: {channel_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            chat = await client.get_chat(channel_id)
            logger.info(f"      üìù –ö–∞–Ω–∞–ª: {chat.title}")
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
            channel_messages = []
            messages_count = 0
            
            async for message in client.get_chat_history(chat.id, limit=15):
                if message.text and message.text.strip():
                    message_text = message.text.strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                    if not message_exists(message_text, channel_url):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                        save_message(message_text, channel_url, 'OTHER')
                        channel_messages.append(message_text)
                        messages_count += 1
            
            all_messages.extend(channel_messages)
            total_new_messages += messages_count
            
            if messages_count > 0:
                logger.info(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ {messages_count} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                for j, msg in enumerate(channel_messages[:2], 1):
                    logger.info(f"         {j}. {msg[:100]}...")
            else:
                logger.info(f"      ‚ö†Ô∏è –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {channel_url}: {str(e)}")
    
    logger.info(f"üìä –í–°–ï–ì–û –ù–ê–ô–î–ï–ù–û: {total_new_messages} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {len(SOURCE_CHANNELS)} –∫–∞–Ω–∞–ª–æ–≤")
    return all_messages

def get_fallback_messages():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª"""
    return [
        "OZON: –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å 1 –Ω–æ—è–±—Ä—è",
        "Wildberries —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' —Å 5% –¥–æ 7%",
        "–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç —ç–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫—É –∑–∞ 2 —á–∞—Å–∞ –≤ –ú–æ—Å–∫–≤–µ",
        "OZON Travel: –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π",
        "WB –≤–≤–æ–¥–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–û–¥–µ–∂–¥–∞'",
        "OZON –ö–∞—Ä—Ç–∞: –∫–µ—à–±—ç–∫ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 10% –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π",
        "Wildberries –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ–∏—Å–∫–µ",
        "–Ø–Ω–¥–µ–∫—Å –î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –∑–æ–Ω—É –ø–æ–∫—Ä—ã—Ç–∏—è –¥–æ 200 –≥–æ—Ä–æ–¥–æ–≤",
        "OZON Marketplace: –Ω–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤",
        "WB: –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª–∏—Ç–∏–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ - —Å—Ä–æ–∫ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 45 –¥–Ω–µ–π"
    ]
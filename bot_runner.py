import asyncio
import logging
from pyrogram import Client
from pyrogram.errors import ChannelInvalid, ChannelPrivate, UsernameNotOccupied
from database import get_last_messages, save_post, save_message, message_exists
from ai_processor import AIProcessor
from post_formatter import PostFormatter
from config import API_ID, API_HASH, TARGET_CHANNEL, BOT_TOKEN, SOURCE_CHANNELS

logger = logging.getLogger(__name__)

async def run_bot():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–µ–π"""
    logger.info("=" * 60)
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê - –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ê–Ø –°–ï–°–°–ò–Ø")
    logger.info("=" * 60)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    user_client = None
    bot_client = None
    
    try:
        # 1. –ü–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–µ–π (telegram_parser.session)
        logger.info("1. üîê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ô –°–ï–°–°–ò–ò...")
        user_client = Client(
            "telegram_parser",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
            api_id=API_ID, 
            api_hash=API_HASH,
            workdir="./"
        )
        
        await user_client.start()
        me = await user_client.get_me()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {me.first_name} (@{me.username})")
        
        # 2. –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤
        logger.info("2. üîç –ó–ê–ü–£–°–ö –ü–ê–†–°–ò–ù–ì–ê –ö–ê–ù–ê–õ–û–í...")
        parsing_results = await parse_channels_with_user(user_client)
        
        all_parsed_messages = parsing_results['messages']
        channel_stats = parsing_results['stats']
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        ai_processor = AIProcessor()
        post_formatter = PostFormatter()
        
        if all_parsed_messages:
            logger.info(f"3. üß† –°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–ê –ù–ê –û–°–ù–û–í–ï {len(all_parsed_messages)} –†–ï–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô")
            structured_content = ai_processor.structure_content(all_parsed_messages, [])
            post_type = "–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï"
        else:
            logger.info("3. üîÑ –ò–°–ü–û–õ–¨–ó–£–Æ –†–ï–ó–ï–†–í–ù–´–ô –ö–û–ù–¢–ï–ù–¢")
            recent_messages = get_last_messages(limit=10)
            if recent_messages:
                texts = [msg['text'] for msg in recent_messages if msg['text']]
                logger.info(f"   üìä –ò—Å–ø–æ–ª—å–∑—É—é {len(texts)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            else:
                texts = get_fallback_messages()
                logger.info("   üìù –ò—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            structured_content = ai_processor.structure_content(texts, [])
            post_type = "–†–ï–ó–ï–†–í–ù–´–ï –î–ê–ù–ù–´–ï"
        
        post_content = post_formatter.format_structured_post(structured_content)
        save_post(post_content)
        
        # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ —Å –±–æ—Ç–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
        logger.info("4. ü§ñ –û–¢–ü–†–ê–í–ö–ê –ü–û–°–¢–ê...")
        if BOT_TOKEN:
            bot_client = Client(
                "telegram_bot",
                api_id=API_ID,
                api_hash=API_HASH,
                bot_token=BOT_TOKEN,
                workdir="./"
            )
            await bot_client.start()
            
            max_length = 4096
            if len(post_content) > max_length:
                post_content = post_content[:max_length-100] + "\n\n... (–ø–æ—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω)"
            
            await bot_client.send_message(TARGET_CHANNEL, post_content)
            logger.info(f"‚úÖ –ü–û–°–¢ –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù –í –ö–ê–ù–ê–õ–ï {TARGET_CHANNEL}")
        else:
            logger.warning("‚ö†Ô∏è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø–æ—Å—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_message = generate_stats_message(channel_stats, len(all_parsed_messages), post_type)
        logger.info(f"üéØ –ò–¢–û–ì: {stats_message}")
        
        return f"""
        <h2>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h2>
        <p><strong>–¢–∏–ø –ø–æ—Å—Ç–∞:</strong> {post_type}</p>
        <p><strong>–†–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:</strong> {len(all_parsed_messages)}</p>
        <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º:</h3>
        <pre>{stats_message}</pre>
        <p><strong>üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ Render Dashboard</strong></p>
        <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
        """
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        logger.error(f"üîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò: {traceback.format_exc()}")
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    finally:
        if user_client:
            await user_client.stop()
        if bot_client:
            await bot_client.stop()

async def parse_channels_with_user(user_client):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–µ–π"""
    all_messages = []
    channel_stats = {}
    
    logger.info(f"üì° –ü–ê–†–°–ò–ù–ì {len(SOURCE_CHANNELS)} –ö–ê–ù–ê–õ–û–í:")
    logger.info("=" * 50)
    
    for i, channel_url in enumerate(SOURCE_CHANNELS, 1):
        channel_messages = []
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
            if channel_url.startswith('https://t.me/'):
                channel_id = channel_url.replace('https://t.me/', '')
            elif channel_url.startswith('@'):
                channel_id = channel_url[1:]
            else:
                channel_id = channel_url
            
            logger.info(f"   {i}. üîç –ü–∞—Ä—Å–∏–º: {channel_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            chat = await user_client.get_chat(channel_id)
            logger.info(f"      üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}")
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–µ–π!)
            messages_count = 0
            new_messages_count = 0
            
            async for message in user_client.get_chat_history(chat.id, limit=20):
                if message.text and message.text.strip():
                    message_text = message.text.strip()
                    messages_count += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                    if not message_exists(message_text, channel_url):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                        save_message(message_text, channel_url, 'OTHER')
                        channel_messages.append(message_text)
                        new_messages_count += 1
            
            all_messages.extend(channel_messages)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª—É
            channel_stats[channel_id] = {
                'title': chat.title,
                'total_messages': messages_count,
                'new_messages': new_messages_count,
                'success': True
            }
            
            if new_messages_count > 0:
                logger.info(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ {new_messages_count} –Ω–æ–≤—ã—Ö –∏–∑ {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                for j, msg in enumerate(channel_messages[:2], 1):
                    logger.info(f"         üì® {j}. {msg[:80]}...")
            else:
                logger.info(f"      ‚ö†Ô∏è –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: 0 (–≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_count})")
            
        except ChannelPrivate:
            logger.error(f"      ‚ùå –ö–ê–ù–ê–õ –ü–†–ò–í–ê–¢–ù–´–ô: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            channel_stats[channel_url] = {'success': False, 'error': 'Private channel'}
        except ChannelInvalid:
            logger.error(f"      ‚ùå –ù–ï–í–ï–†–ù–´–ô –ö–ê–ù–ê–õ: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            channel_stats[channel_url] = {'success': False, 'error': 'Invalid channel'}
        except UsernameNotOccupied:
            logger.error(f"      ‚ùå –ö–ê–ù–ê–õ –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢: username –Ω–µ –∑–∞–Ω—è—Ç")
            channel_stats[channel_url] = {'success': False, 'error': 'Username not occupied'}
        except Exception as e:
            logger.error(f"      ‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê: {str(e)}")
            channel_stats[channel_url] = {'success': False, 'error': str(e)}
    
    logger.info("=" * 50)
    logger.info(f"üìä –í–°–ï–ì–û –ù–ê–ô–î–ï–ù–û: {len(all_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    return {
        'messages': all_messages,
        'stats': channel_stats
    }

def generate_stats_message(channel_stats, total_messages, post_type):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats_lines = []
    stats_lines.append(f"–¢–ò–ü –ü–û–°–¢–ê: {post_type}")
    stats_lines.append(f"–í–°–ï–ì–û –°–û–û–ë–©–ï–ù–ò–ô: {total_messages}")
    stats_lines.append("")
    stats_lines.append("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–ù–ê–õ–ê–ú:")
    stats_lines.append("-" * 40)
    
    successful_channels = 0
    for channel, stats in channel_stats.items():
        if stats.get('success'):
            successful_channels += 1
            stats_lines.append(f"‚úÖ {channel}")
            stats_lines.append(f"   üìù {stats.get('title', 'N/A')}")
            stats_lines.append(f"   üì® –ù–æ–≤—ã—Ö: {stats.get('new_messages', 0)}")
            stats_lines.append(f"   üìä –í—Å–µ–≥–æ: {stats.get('total_messages', 0)}")
        else:
            stats_lines.append(f"‚ùå {channel}")
            stats_lines.append(f"   üí• –û—à–∏–±–∫–∞: {stats.get('error', 'Unknown error')}")
        stats_lines.append("")
    
    stats_lines.append(f"–£–°–ü–ï–®–ù–´–• –ö–ê–ù–ê–õ–û–í: {successful_channels}/{len(channel_stats)}")
    
    return "\n".join(stats_lines)

def get_fallback_messages():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª"""
    return [
        "OZON: –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å 1 –Ω–æ—è–±—Ä—è - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ–æ–±–∑–æ—Ä—ã",
        "Wildberries —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' —Å 5% –¥–æ 7% —Å 15 –Ω–æ—è–±—Ä—è",
        "–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç —ç–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫—É –∑–∞ 2 —á–∞—Å–∞ –≤ –ú–æ—Å–∫–≤–µ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ",
        "OZON Travel: –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π –≤ –¢—É—Ä—Ü–∏–∏ –∏ –û–ê–≠",
        "WB –≤–≤–æ–¥–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–û–¥–µ–∂–¥–∞'",
        "OZON –ö–∞—Ä—Ç–∞: –∫–µ—à–±—ç–∫ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 10% –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π",
        "Wildberries –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–æ–≤ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞–º —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º",
        "–Ø–Ω–¥–µ–∫—Å –î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –∑–æ–Ω—É –ø–æ–∫—Ä—ã—Ç–∏—è –¥–æ 200 –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏",
        "OZON Marketplace: –Ω–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤ - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤",
        "WB: –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª–∏—Ç–∏–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ - —Å—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 45 –¥–Ω–µ–π"
    ]
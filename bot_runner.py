import asyncio
import logging
from pyrogram import Client
from database import get_last_messages, save_post
from parser import TelegramParser
from ai_processor import AIProcessor
from post_formatter import PostFormatter
from config import API_ID, API_HASH, TARGET_CHANNEL

logger = logging.getLogger(__name__)

async def run_bot():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –ø–∞—Ä—Å–µ—Ä–∞...")
    
    client = Client("telegram_parser", api_id=API_ID, api_hash=API_HASH)
    
    try:
        await client.start()
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Telegram")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        parser = TelegramParser(client)
        ai_processor = AIProcessor()
        post_formatter = PostFormatter()
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤
        logger.info("üîç –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤...")
        parsing_results = await parser.parse_all_channels()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        if parsing_results['total_new_messages'] >= 3:
            logger.info("üß† –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
            post = await create_post_with_real_parsing(parsing_results, ai_processor, post_formatter)
        else:
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞...")
            post = await create_fallback_post(ai_processor, post_formatter)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
        save_post(post)
        await publish_post(client, post)
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        await safe_stop_client(client)

async def create_post_with_real_parsing(parsing_results, ai_processor, post_formatter):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    try:
        source_texts = []
        discussion_texts = []
        
        for result in parsing_results['results']:
            if result['new_messages'] > 0:
                messages = result.get('messages', [])
                for msg in messages:
                    if result['type'] == 'main':
                        source_texts.append(msg)
                    else:
                        discussion_texts.append(msg)
        
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(source_texts)} –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏ {len(discussion_texts)} –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        structured_content = ai_processor.structure_content(source_texts, discussion_texts)
        post_content = post_formatter.format_structured_post(structured_content)
        
        return post_content
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        return await create_fallback_post(ai_processor, post_formatter)

async def create_fallback_post(ai_processor, post_formatter):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ—Å—Ç"""
    recent_messages = get_last_messages(limit=10)
    
    if recent_messages:
        texts = [msg['text'] for msg in recent_messages if msg['text']]
        structured_content = ai_processor.structure_content(texts, [])
    else:
        structured_content = {
            'title': 'üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤',
            'summary': '–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö',
            'sections': {
                'OZON': {
                    'key_points': [
                        '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤',
                        '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö',
                        '–ù–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'
                    ],
                    'important': ['–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞'],
                    'tips': ['–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏']
                },
                'WB': {
                    'key_points': [
                        '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤—ã–∫—É–ø–∞',
                        '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ —Å –≤–æ–∑–≤—Ä–∞—Ç–∞–º–∏',
                        '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö –≤—ã–¥–∞—á–∏'
                    ],
                    'important': ['–í–Ω–∏–º–∞–Ω–∏–µ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞—Ö'],
                    'tips': ['–†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂']
                }
            },
            'recommendations': '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö'
        }
    
    return post_formatter.format_structured_post(structured_content)

async def publish_post(client, post_content):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª"""
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–æ—Å—Ç–∞ –¥–ª—è Telegram
        max_length = 4096
        if len(post_content) > max_length:
            post_content = post_content[:max_length-100] + "\n\n... (–ø–æ—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω)"
        
        await client.send_message(TARGET_CHANNEL, post_content)
        logger.info(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {TARGET_CHANNEL}")
        
        # –î—É–±–ª–∏—Ä—É–µ–º –≤ –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:\n{post_content[:500]}...")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try:
            await client.send_message("me", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª. –û—à–∏–±–∫–∞: " + str(e))
        except:
            pass
        raise

async def safe_stop_client(client):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        if client.is_connected:
            await client.stop()
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
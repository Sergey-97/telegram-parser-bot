import asyncio
import logging
from simple_parser import parse_all_channels_simple
from telegram_manager import telegram_manager
from ai_processor import AIProcessor
from post_formatter import PostFormatter
from database import get_last_messages, save_post

logger = logging.getLogger(__name__)

async def run_bot():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("=" * 60)
    logger.info("üöÄ –ó–ê–ü–£–°–ö TELEGRAM –ü–ê–†–°–ï–†–ê")
    logger.info("=" * 60)
    
    try:
        # 1. –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤
        logger.info("1. üîç –ü–ê–†–°–ò–ù–ì –ö–ê–ù–ê–õ–û–í...")
        parsing_results = await parse_all_channels_simple()
        
        all_messages = parsing_results['messages']
        channel_stats = parsing_results['stats']
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        logger.info("2. üß† –°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–ê...")
        ai_processor = AIProcessor()
        post_formatter = PostFormatter()
        
        if all_messages:
            logger.info(f"   üìä –ò—Å–ø–æ–ª—å–∑—É—é {len(all_messages)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            structured_content = ai_processor.structure_content(all_messages, [])
            post_type = "–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï"
        else:
            logger.info("   üîÑ –ò—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            recent_messages = get_last_messages(limit=8)
            if recent_messages:
                texts = [msg['text'] for msg in recent_messages if msg['text']]
                logger.info(f"   üìÅ –ò–∑ –±–∞–∑—ã: {len(texts)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                texts = [
                    "OZON: –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤",
                    "Wildberries —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏",
                    "–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç —ç–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫—É",
                    "OZON Travel: –Ω–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "WB –≤–≤–æ–¥–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –æ–¥–µ–∂–¥—ã"
                ]
                logger.info("   üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            structured_content = ai_processor.structure_content(texts, [])
            post_type = "–†–ï–ó–ï–†–í–ù–´–ï –î–ê–ù–ù–´–ï"
        
        post_content = post_formatter.format_structured_post(structured_content)
        save_post(post_content)
        
        # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞
        logger.info("3. üì§ –û–¢–ü–†–ê–í–ö–ê –ü–û–°–¢–ê...")
        success = await telegram_manager.send_message(post_content)
        
        # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_text = generate_stats_text(channel_stats, len(all_messages), post_type, success)
        logger.info(f"üéØ –ò–¢–û–ì: {stats_text}")
        
        return f"""
        <h2>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h2>
        <p><strong>–¢–∏–ø –ø–æ—Å—Ç–∞:</strong> {post_type}</p>
        <p><strong>–†–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:</strong> {len(all_messages)}</p>
        <p><strong>–û—Ç–ø—Ä–∞–≤–∫–∞:</strong> {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å'}</p>
        
        <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:</h3>
        <pre>{stats_text}</pre>
        
        <h3>üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:</h3>
        <pre>{post_content[:500]}...</pre>
        
        <p><strong>üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤ Render Dashboard</strong></p>
        <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
        """
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        import traceback
        logger.error(f"üîç –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def generate_stats_text(channel_stats, total_messages, post_type, send_success):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    lines = []
    lines.append(f"–¢–ò–ü –ü–û–°–¢–ê: {post_type}")
    lines.append(f"–í–°–ï–ì–û –°–û–û–ë–©–ï–ù–ò–ô: {total_messages}")
    lines.append(f"–û–¢–ü–†–ê–í–ö–ê: {'‚úÖ –£–°–ü–ï–®–ù–û' if send_success else '‚ùå –ù–ï –£–î–ê–õ–û–°–¨'}")
    lines.append("")
    lines.append("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–ù–ê–õ–ê–ú:")
    lines.append("-" * 40)
    
    successful_parses = 0
    for stat in channel_stats:
        if stat.get('success'):
            successful_parses += 1
            lines.append(f"‚úÖ {stat['channel']}")
            lines.append(f"   üìù {stat['title']}")
            lines.append(f"   üì® –ù–æ–≤—ã—Ö: {stat['new_messages']}")
        else:
            lines.append(f"‚ùå {stat.get('channel', 'N/A')}")
            lines.append(f"   üí• {stat.get('error', 'Unknown error')}")
        lines.append("")
    
    lines.append(f"–£–°–ü–ï–®–ù–´–• –ü–ê–†–°–ò–ù–ì–û–í: {successful_parses}/{len(channel_stats)}")
    
    return "\n".join(lines)
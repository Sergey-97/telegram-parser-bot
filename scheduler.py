import os
import asyncio
import logging
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

logger = logging.getLogger(__name__)

def scheduled_post():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ - –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        logger.info("üïê –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        from bot_runner import run_bot
        result = loop.run_until_complete(run_bot())
        loop.close()
        
        logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        scheduler = BackgroundScheduler()
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00 UTC
        trigger = CronTrigger(
            day_of_week='mon',  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            hour=10,            # 10:00
            minute=0,           # 00 –º–∏–Ω—É—Ç
            timezone='UTC'
        )
        
        scheduler.add_job(
            func=scheduled_post,
            trigger=trigger,
            id='weekly_post',
            name='Weekly marketplace analysis post',
            replace_existing=True
        )
        
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ 11:00 –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω DEBUG
        if os.getenv('DEBUG_SCHEDULE', 'false').lower() == 'true':
            scheduler.add_job(
                func=scheduled_post,
                trigger=CronTrigger(hour=11, minute=0, timezone='UTC'),
                id='daily_test',
                name='Daily test post'
            )
            logger.info("üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ 11:00 UTC")
        
        scheduler.start()
        logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00 UTC")
        
        return scheduler
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return None

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
scheduler = start_scheduler()
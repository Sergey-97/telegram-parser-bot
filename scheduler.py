import schedule
import time
import threading
from datetime import datetime
from parser import parse_channels_sync
from nlp_processor import NLPProcessor
from database import Session, Post
from bot import publish_post
import asyncio
import logging
import os
from config import DEBUG

logger = logging.getLogger(__name__)

class BotScheduler:
    def __init__(self):
        self.nlp_processor = NLPProcessor()
        self.running = False
        self.last_run = None
        
    def daily_task(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ –ø–∞—Ä—Å–∏–Ω–≥—É –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        self.last_run = datetime.now()
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: {self.last_run}")
        
        try:
            # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª—ã
            logger.info("üì° –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤...")
            parse_result = parse_channels_sync()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã
            logger.info("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ NLP...")
            self.process_and_publish()
            
            logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ: {e}")
    
    def process_and_publish(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—ã –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        from config import SOURCE_CHANNELS, DISCUSSION_CHANNELS
        
        session = Session()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            main_posts = session.query(Post).filter(
                Post.channel.in_(SOURCE_CHANNELS),
                Post.processed == False
            ).order_by(Post.date.desc()).all()
            
            discussion_posts = session.query(Post).filter(
                Post.channel.in_(DISCUSSION_CHANNELS),
                Post.processed == False
            ).order_by(Post.date.desc()).all()
            
            logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(main_posts)} –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ {len(discussion_posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π")
            
            if not main_posts and not discussion_posts:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ NLP
            final_content = self.nlp_processor.process_posts(main_posts, discussion_posts)
            
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            logger.info("üì§ –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª...")
            asyncio.run(publish_post(final_content))
            
            # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç—ã –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            for post in main_posts + discussion_posts:
                post.processed = True
                post.processed_text = final_content[:500]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                
            session.commit()
            logger.info("‚úÖ –ü–æ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            session.rollback()
        finally:
            session.close()
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.running = True
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule.every().day.at("06:00").do(self.daily_task)  # –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥
        schedule.every().day.at("18:00").do(self.daily_task)  # –í–µ—á–µ—Ä–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥
        
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –≤ debug —Ä–µ–∂–∏–º–µ
        if DEBUG:
            logger.info("üîß DEBUG —Ä–µ–∂–∏–º: –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
            schedule.every(30).minutes.do(self.daily_task)
        
        logger.info(f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –†–µ–∂–∏–º: {'DEBUG' if DEBUG else 'PRODUCTION'}")
        
        while self.running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.running = False
        logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def run_scheduler_in_thread():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    scheduler = BotScheduler()
    scheduler_thread = threading.Thread(target=scheduler.run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    
    logger.info("üßµ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    return scheduler
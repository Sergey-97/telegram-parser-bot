import asyncio
import logging
from pyrogram import Client
from pyrogram.errors import ChannelPrivate, ChannelInvalid, UsernameNotOccupied
from database import save_message, message_exists
from parsing_state import get_channel_state, update_channel_state, get_parsing_stats
from config import API_ID, API_HASH, SOURCE_CHANNELS

logger = logging.getLogger(__name__)

async def parse_channel_advanced(client, channel_url, initial_limit=10, regular_limit=20):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ URL
        if channel_url.startswith('https://t.me/'):
            channel_id = channel_url.replace('https://t.me/', '')
        else:
            channel_id = channel_url
        
        logger.info(f"üîç –ü–∞—Ä—Å–∏–º: {channel_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channel_state = get_channel_state(channel_url)
        is_first_run = channel_state['is_first_run']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await client.get_chat(channel_id)
        logger.info(f"   üìù –ö–∞–Ω–∞–ª: {chat.title}")
        logger.info(f"   üéØ –†–µ–∂–∏–º: {'–ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö' if is_first_run else '–†–ï–ì–£–õ–Ø–†–ù–´–ô –ü–ê–†–°–ò–ù–ì'}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        message_limit = initial_limit if is_first_run else regular_limit
        logger.info(f"   üì® –õ–∏–º–∏—Ç: {message_limit} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages_count = 0
        new_messages_count = 0
        parsed_messages = []
        last_message_id = 0
        
        async for message in client.get_chat_history(chat.id, limit=message_limit):
            if message.text and message.text.strip():
                message_text = message.text.strip()
                messages_count += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if last_message_id == 0:
                    last_message_id = message.id
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                if not message_exists(message_text, channel_url):
                    save_message(message_text, channel_url, 'OTHER')
                    parsed_messages.append(message_text)
                    new_messages_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        if last_message_id > 0:
            update_channel_state(channel_url, last_message_id, new_messages_count)
        
        logger.info(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        logger.info(f"   üÜï –ù–æ–≤—ã—Ö: {new_messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if new_messages_count > 0:
            for i, msg in enumerate(parsed_messages[:2], 1):
                logger.info(f"      üì® {i}. {msg[:80]}...")
        
        return {
            'channel': channel_id,
            'title': chat.title,
            'is_first_run': is_first_run,
            'new_messages': new_messages_count,
            'total_processed': messages_count,
            'messages': parsed_messages,
            'success': True
        }
        
    except ChannelPrivate:
        logger.error(f"   ‚ùå –ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return {'success': False, 'error': 'Private channel'}
    except ChannelInvalid:
        logger.error(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return {'success': False, 'error': 'Invalid channel'}
    except UsernameNotOccupied:
        logger.error(f"   ‚ùå –ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return {'success': False, 'error': 'Username not occupied'}
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return {'success': False, 'error': str(e)}

async def parse_all_channels_advanced():
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –ü–ê–†–°–ï–†–ê")
    logger.info("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_parsing_stats()
    logger.info(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: {stats['total_channels']} –∫–∞–Ω–∞–ª–æ–≤, {stats['total_messages_parsed']} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    client = None
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é
        client = Client(
            "telegram_parser",
            api_id=API_ID,
            api_hash=API_HASH,
            workdir="/opt/render/project/src"
        )
        
        await client.start()
        me = await client.get_me()
        logger.info(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")
        logger.info(f"   –¢–∏–ø: {'ü§ñ –ë–æ—Ç' if me.is_bot else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}")
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª—ã
        all_messages = []
        channel_stats = []
        total_new_messages = 0
        
        for channel_url in SOURCE_CHANNELS:
            result = await parse_channel_advanced(client, channel_url)
            channel_stats.append(result)
            
            if result['success'] and result['messages']:
                all_messages.extend(result['messages'])
                total_new_messages += result['new_messages']
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("=" * 60)
        logger.info(f"üìä –ò–¢–û–ì –ü–ê–†–°–ò–ù–ì–ê:")
        logger.info(f"   üÜï –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {total_new_messages}")
        logger.info(f"   üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(all_messages)}")
        logger.info(f"   üì° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channel_stats)}")
        
        successful_parses = sum(1 for stat in channel_stats if stat['success'])
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤: {successful_parses}/{len(channel_stats)}")
        
        return {
            'messages': all_messages,
            'stats': channel_stats,
            'total_new_messages': total_new_messages,
            'total_messages': len(all_messages),
            'successful_channels': successful_parses,
            'total_channels': len(channel_stats)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return {
            'messages': [], 
            'stats': [], 
            'total_new_messages': 0,
            'total_messages': 0,
            'successful_channels': 0,
            'total_channels': 0,
            'error': str(e)
        }
    finally:
        if client:
            await client.stop()
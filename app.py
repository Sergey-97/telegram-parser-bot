import os
import asyncio
import logging
from flask import Flask

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    from database import init_db
    init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

@app.route('/')
def home():
    return """
    <h1>ü§ñ Telegram Parser Bot - –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì</h1>
    <p>–ë–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Telegram –∫–∞–Ω–∞–ª–æ–≤</p>
    
    <h3>üöÄ –î–µ–π—Å—Ç–≤–∏—è:</h3>
    <ul>
        <li><a href="/run-now">/run-now</a> - –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞</li>
        <li><a href="/health">/health</a> - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã</li>
        <li><a href="/test-access">/test-access</a> - –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º</li>
        <li><a href="/clear-db">/clear-db</a> - –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã (–µ—Å–ª–∏ –º–Ω–æ–≥–æ –¥—É–±–ª–µ–π)</li>
    </ul>
    
    <h3>üìä –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:</h3>
    <ul>
        <li>@ozonmarketplace</li>
        <li>@wbsellerofficial</li>
        <li>@ozon_adv</li>
        <li>@sklad1313</li>
        <li>@sellmonitor_com</li>
        <li>@redmilliard</li>
        <li>@marketplace_hogwarts</li>
        <li>@mpgo_ru</li>
        <li>@ProdaemWB</li>
        <li>@ProdaemOZON</li>
    </ul>
    """

@app.route('/health')
def health():
    return "‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"

@app.route('/run-now')
def run_now():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        from bot_runner import run_bot
        result = loop.run_until_complete(run_bot())
        loop.close()
        
        return result
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

@app.route('/test-access')
def test_access():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        from bot_runner import parse_channels_improved
        from pyrogram import Client
        from config import API_ID, API_HASH, BOT_TOKEN
        
        client = Client("test_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
        
        async def test():
            await client.start()
            result = await parse_channels_improved(client)
            await client.stop()
            return result
        
        parsing_result = loop.run_until_complete(test())
        loop.close()
        
        stats = parsing_result['stats']
        messages = parsing_result['messages']
        
        html_result = f"""
        <h2>üß™ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º</h2>
        <p><strong>–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</strong> {len(messages)}</p>
        
        <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞:</h3>
        <table border="1" style="border-collapse: collapse; width: 100%;">
            <tr>
                <th>–ö–∞–Ω–∞–ª</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
                <th>–°–æ–æ–±—â–µ–Ω–∏–π</th>
                <th>–î–µ—Ç–∞–ª–∏</th>
            </tr>
        """
        
        for channel, data in stats.items():
            if data.get('success'):
                status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
                details = f"–ù–æ–≤—ã—Ö: {data.get('new_messages', 0)}"
            else:
                status = "‚ùå –û—à–∏–±–∫–∞"
                details = data.get('error', 'Unknown')
            
            html_result += f"""
            <tr>
                <td>{channel}</td>
                <td>{status}</td>
                <td>{data.get('new_messages', 0)}</td>
                <td>{details}</td>
            </tr>
            """
        
        html_result += "</table>"
        
        if messages:
            html_result += f"""
            <h3>üìù –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π ({len(messages)} –≤—Å–µ–≥–æ):</h3>
            <ol>
            {"".join([f"<li>{msg[:150]}...</li>" for msg in messages[:5]])}
            </ol>
            """
        
        html_result += '<a href="/">‚Üê –ù–∞–∑–∞–¥</a>'
        return html_result
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}"

@app.route('/clear-db')
def clear_db():
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    try:
        import sqlite3
        conn = sqlite3.connect('telegram_parser.db')
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
        cursor.execute("DELETE FROM messages WHERE created_at < datetime('now', '-7 days')")
        deleted_messages = cursor.rowcount
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã
        cursor.execute("DELETE FROM posts WHERE created_at < datetime('now', '-3 days')")
        deleted_posts = cursor.rowcount
        
        conn.commit()
        conn.close()
        
        return f"""
        <h2>üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h2>
        <p>‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_messages}</p>
        <p>‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {deleted_posts}</p>
        <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
        """
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}"

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
import os
import asyncio
import logging
from flask import Flask

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    from database import init_db
    init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

@app.route('/')
def home():
    return """
    <h1>ü§ñ Telegram Parser Bot - –†–ï–ê–õ–¨–ù–´–ô –ü–ê–†–°–ò–ù–ì</h1>
    <p>–ë–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Telegram –∫–∞–Ω–∞–ª–æ–≤</p>
    
    <h3>üöÄ –î–µ–π—Å—Ç–≤–∏—è:</h3>
    <ul>
        <li><a href="/run-now">/run-now</a> - –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞</li>
        <li><a href="/health">/health</a> - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã</li>
        <li><a href="/test-parsing">/test-parsing</a> - –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)</li>
    </ul>
    
    <h3>üìä –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:</h3>
    <ul>
        <li>@ozonmarketplace</li>
        <li>@wbsellerofficial</li>
        <li>@ozon_adv</li>
        <li>@sklad1313</li>
        <li>@sellmonitor_com</li>
        <li>–∏ –¥—Ä—É–≥–∏–µ...</li>
    </ul>
    """

@app.route('/health')
def health():
    return "‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"

@app.route('/run-now')
def run_now():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        from bot_runner import run_bot
        result = loop.run_until_complete(run_bot())
        loop.close()
        
        return f"""
        <h2>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</h2>
        <p>{result}</p>
        <p><strong>üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Render Dashboard –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–∞—Ä—Å–∏–Ω–≥–∞</strong></p>
        <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
        """
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

@app.route('/test-parsing')
def test_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        from bot_runner import parse_all_channels
        from pyrogram import Client
        from config import API_ID, API_HASH, BOT_TOKEN
        
        client = Client("test_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
        
        async def test_parse():
            await client.start()
            messages = await parse_all_channels(client)
            await client.stop()
            return messages
        
        messages = loop.run_until_complete(test_parse())
        loop.close()
        
        return f"""
        <h2>üß™ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞</h2>
        <p><strong>–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</strong> {len(messages)}</p>
        
        <h3>üìù –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:</h3>
        <ol>
        {"".join([f"<li>{msg[:200]}...</li>" for msg in messages[:5]])}
        </ol>
        
        <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
        """
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}"

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
import os
import asyncio
import logging
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    from database import init_db
    init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

@app.route('/')
def home():
    return """
    <h1>ü§ñ Telegram Parser Bot</h1>
    <p>–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤</p>
    
    <h3>üöÄ –î–µ–π—Å—Ç–≤–∏—è:</h3>
    <ul>
        <li><a href="/run-bot">/run-bot</a> - –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞</li>
        <li><a href="/test-parser">/test-parser</a> - –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞</li>
        <li><a href="/test-send">/test-send</a> - –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏</li>
        <li><a href="/health">/health</a> - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã</li>
    </ul>
    
    <h3>üìä –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:</h3>
    <ul>
        <li>@ozonmarketplace</li>
        <li>@wbsellerofficial</li>
        <li>@ozon_adv</li>
        <li>@sklad1313</li>
        <li>@sellmonitor_com</li>
    </ul>
    
    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ‚úÖ Telegram —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞</p>
    """

@app.route('/health')
def health():
    return "‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"

@app.route('/run-bot')
def run_bot():
    """–ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        from bot_runner import run_bot
        result = loop.run_until_complete(run_bot())
        loop.close()
        
        return result
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

@app.route('/test-parser')
def test_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        from simple_parser import parse_all_channels_simple
        result = loop.run_until_complete(parse_all_channels_simple())
        loop.close()
        
        stats = result['stats']
        messages = result['messages']
        
        html_result = f"""
        <h2>üß™ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞</h2>
        <p><strong>–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</strong> {len(messages)}</p>
        
        <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h3>
        <table border="1" style="border-collapse: collapse; width: 100%;">
            <tr>
                <th>–ö–∞–Ω–∞–ª</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
                <th>–°–æ–æ–±—â–µ–Ω–∏–π</th>
                <th>–î–µ—Ç–∞–ª–∏</th>
            </tr>
        """
        
        for stat in stats:
            if stat.get('success'):
                status = "‚úÖ –£—Å–ø–µ—à–Ω–æ"
                details = f"–ù–æ–≤—ã—Ö: {stat['new_messages']}"
            else:
                status = "‚ùå –û—à–∏–±–∫–∞"
                details = stat.get('error', 'Unknown')
            
            html_result += f"""
            <tr>
                <td>{stat.get('channel', 'N/A')}</td>
                <td>{status}</td>
                <td>{stat.get('new_messages', 0)}</td>
                <td>{details}</td>
            </tr>
            """
        
        html_result += "</table>"
        
        if messages:
            html_result += f"""
            <h3>üìù –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:</h3>
            <ol>
            {"".join([f"<li>{msg[:150]}...</li>" for msg in messages[:5]])}
            </ol>
            """
        
        html_result += '<a href="/">‚Üê –ù–∞–∑–∞–¥</a>'
        return html_result
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}"

@app.route('/test-send')
def test_send():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        from telegram_manager import telegram_manager
        from post_formatter import PostFormatter
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        formatter = PostFormatter()
        test_post = formatter._create_fallback_post()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        success = loop.run_until_complete(telegram_manager.send_message(test_post))
        loop.run_until_complete(telegram_manager.cleanup())
        loop.close()
        
        if success:
            return """
            <h2>‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å–ø–µ—à–µ–Ω!</h2>
            <p>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.</p>
            <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
            """
        else:
            return """
            <h2>‚ùå –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ —É–¥–∞–ª—Å—è</h2>
            <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ.</p>
            <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
            """
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}"

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
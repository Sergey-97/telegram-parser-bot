import os
import asyncio
import logging
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    from database import init_db
    init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

@app.route('/')
def home():
    return """
    <h1>ü§ñ Telegram Parser Bot</h1>
    <p>–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤</p>
    
    <h3>üöÄ –î–µ–π—Å—Ç–≤–∏—è:</h3>
    <ul>
        <li><a href="/health">/health</a> - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã</li>
        <li><a href="/test-ai">/test-ai</a> - –¢–µ—Å—Ç AI –æ–±—Ä–∞–±–æ—Ç–∫–∏</li>
        <li><a href="/test-db">/test-db</a> - –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</li>
        <li><a href="/create-post">/create-post</a> - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç</li>
    </ul>
    
    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç</p>
    """

@app.route('/health')
def health():
    return "‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"

@app.route('/test-ai')
def test_ai():
    """–¢–µ—Å—Ç AI –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        from ai_processor import AIProcessor
        from post_formatter import PostFormatter
        
        ai = AIProcessor()
        formatter = PostFormatter()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        test_messages = [
            "OZON –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∞–≤–∫–∏",
            "WB –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤",
            "–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
        ]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ AI
        structured = ai.structure_content(test_messages, [])
        post = formatter.format_structured_post(structured)
        
        return f"""
        <h2>üß™ –¢–µ—Å—Ç AI –æ–±—Ä–∞–±–æ—Ç–∫–∏</h2>
        <p><strong>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</strong> {len(test_messages)}</p>
        
        <h3>üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
        <pre>{post}</pre>
        
        <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
        """
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ AI: {str(e)}"

@app.route('/test-db')
def test_db():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database import save_message, get_last_messages, save_post
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        save_message("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î", "test_channel", "TEST")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = get_last_messages(5)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        save_post("–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        return f"""
        <h2>üß™ –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h2>
        <p><strong>–°–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ:</strong> {len(messages)}</p>
        
        <h3>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</h3>
        <ul>
        {"".join([f"<li>{msg['text'][:50]}...</li>" for msg in messages])}
        </ul>
        
        <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
        """
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {str(e)}"

@app.route('/create-post')
def create_post():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    try:
        from ai_processor import AIProcessor
        from post_formatter import PostFormatter
        from database import save_post
        
        ai = AIProcessor()
        formatter = PostFormatter()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = [
            "OZON: –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤",
            "Wildberries —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏",
            "–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç —ç–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫—É",
            "OZON —É–ª—É—á—à–∞–µ—Ç –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã",
            "WB –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—Ä—Ç–æ—á–∫–∞–º"
        ]
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
        structured = ai.structure_content(test_data, [])
        post_content = formatter.format_structured_post(structured)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        save_post(post_content)
        
        return f"""
        <h2>üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω!</h2>
        <p><strong>–î–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞:</strong> {len(post_content)} —Å–∏–º–≤–æ–ª–æ–≤</p>
        
        <h3>üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</h3>
        <pre>{post_content}</pre>
        
        <p><strong>‚úÖ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</strong></p>
        <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
        """
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {str(e)}"

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
import os
import asyncio
import logging
from flask import Flask
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try:
    from database import init_db
    init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

def scheduled_post():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ - –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        logger.info("üïê –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        from bot_runner import run_bot
        loop.run_until_complete(run_bot())
        loop.close()
        
        logger.info("‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

@app.route('/')
def home():
    return """
    <h1>ü§ñ Telegram Parser Bot</h1>
    <p>–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤</p>
    <p><strong>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</strong> –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00 UTC</p>
    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</p>
    <p>
        <a href="/health">Health Check</a> | 
        <a href="/run-now">Run Now</a> |
        <a href="/logs">View Logs</a>
    </p>
    """

@app.route('/health')
def health():
    return "OK"

@app.route('/run-now')
def run_now():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        from bot_runner import run_bot
        loop.run_until_complete(run_bot())
        loop.close()
        
        return "‚úÖ Bot executed successfully! Check Render logs for details."
    except Exception as e:
        return f"‚ùå Error: {str(e)}"

@app.route('/logs')
def show_logs():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    try:
        # –í Render –ª–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ dashboard
        return """
        <h2>üìã Logs</h2>
        <p>–õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ Render Dashboard:</p>
        <ol>
            <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–∞—à —Å–µ—Ä–≤–∏—Å –Ω–∞ Render</li>
            <li>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "Logs"</li>
            <li>–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</li>
        </ol>
        <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
        """
    except Exception as e:
        return f"Error: {str(e)}"

def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        scheduler = BackgroundScheduler()
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00 UTC
        trigger = CronTrigger(
            day_of_week='mon',  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            hour=10,            # 10:00
            minute=0,           # 00 –º–∏–Ω—É—Ç
            timezone='UTC'
        )
        
        scheduler.add_job(
            func=scheduled_post,
            trigger=trigger,
            id='weekly_post',
            name='Weekly marketplace analysis post',
            replace_existing=True
        )
        
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ 11:00 –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω DEBUG
        if os.getenv('DEBUG_SCHEDULE', 'false').lower() == 'true':
            scheduler.add_job(
                func=scheduled_post,
                trigger=CronTrigger(hour=11, minute=0, timezone='UTC'),
                id='daily_test',
                name='Daily test post'
            )
            logger.info("üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ 11:00 UTC")
        
        scheduler.start()
        logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00 UTC")
        
        return scheduler
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = None

@app.before_first_request
def initialize():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    global scheduler
    scheduler = start_scheduler()

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ
    scheduler = start_scheduler()
    
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
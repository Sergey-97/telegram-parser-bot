import asyncio
import logging
from advanced_parser import parse_all_channels_advanced
from telegram_manager import telegram_manager
from ai_processor import AIProcessor
from post_formatter import PostFormatter
from database import get_last_messages, save_post
from parsing_state import is_first_run, get_parsing_stats

logger = logging.getLogger(__name__)

async def run_advanced_bot():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å —É–º–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    logger.info("=" * 60)
    logger.info("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê")
    logger.info("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –∑–∞–ø—É—Å–∫
    first_run = is_first_run()
    if first_run:
        logger.info("üéØ –†–ï–ñ–ò–ú: –ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö - –ø–∞—Ä—Å–∏–º –ø–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
    else:
        logger.info("üéØ –†–ï–ñ–ò–ú: –†–ï–ì–£–õ–Ø–†–ù–´–ô –ü–ê–†–°–ò–ù–ì - –∏—â–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    try:
        # 1. –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤
        logger.info("1. üîç –£–ú–ù–´–ô –ü–ê–†–°–ò–ù–ì –ö–ê–ù–ê–õ–û–í...")
        parsing_results = await parse_all_channels_advanced()
        
        all_messages = parsing_results['messages']
        channel_stats = parsing_results['stats']
        total_new_messages = parsing_results['total_new_messages']
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        logger.info("2. üß† –ê–ù–ê–õ–ò–ó –ò –°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–ê...")
        ai_processor = AIProcessor()
        post_formatter = PostFormatter()
        
        if all_messages:
            logger.info(f"   üìä –ò—Å–ø–æ–ª—å–∑—É—é {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            structured_content = ai_processor.structure_content(all_messages, [])
            post_type = "–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï"
            data_source = f"–Ω–∞ –æ—Å–Ω–æ–≤–µ {total_new_messages} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
        else:
            logger.info("   üîÑ –ò—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            recent_messages = get_last_messages(limit=10)
            if recent_messages:
                texts = [msg['text'] for msg in recent_messages if msg['text']]
                logger.info(f"   üìÅ –ò–∑ –±–∞–∑—ã: {len(texts)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                data_source = "–Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"
            else:
                texts = get_fallback_messages()
                logger.info("   üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                data_source = "—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
            
            structured_content = ai_processor.structure_content(texts, [])
            post_type = "–†–ï–ó–ï–†–í–ù–´–ï –î–ê–ù–ù–´–ï"
        
        post_content = post_formatter.format_structured_post(structured_content)
        save_post(post_content)
        
        # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞
        logger.info("3. üì§ –û–¢–ü–†–ê–í–ö–ê –ü–û–°–¢–ê...")
        send_success = await telegram_manager.send_message(post_content)
        
        # 4. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = get_parsing_stats()
        stats_text = generate_detailed_stats(
            channel_stats, 
            total_new_messages, 
            len(all_messages),
            post_type, 
            send_success,
            stats,
            first_run
        )
        
        logger.info(f"üéØ –ò–¢–û–ì: {stats_text}")
        
        return create_result_html(
            post_type, 
            total_new_messages, 
            len(all_messages),
            send_success, 
            stats_text, 
            post_content,
            data_source,
            first_run
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        import traceback
        logger.error(f"üîç –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def generate_detailed_stats(channel_stats, new_messages, total_messages, post_type, send_success, parsing_stats, first_run):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    lines = []
    lines.append(f"üéØ –†–ï–ñ–ò–ú: {'–ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö' if first_run else '–†–ï–ì–£–õ–Ø–†–ù–´–ô –ü–ê–†–°–ò–ù–ì'}")
    lines.append(f"üìä –¢–ò–ü –ü–û–°–¢–ê: {post_type}")
    lines.append(f"üì® –ù–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô: {new_messages}")
    lines.append(f"üìù –í–°–ï–ì–û –°–û–û–ë–©–ï–ù–ò–ô: {total_messages}")
    lines.append(f"üì§ –û–¢–ü–†–ê–í–ö–ê: {'‚úÖ –£–°–ü–ï–®–ù–û' if send_success else '‚ùå –ù–ï –£–î–ê–õ–û–°–¨'}")
    lines.append("")
    
    lines.append("üì° –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê:")
    lines.append("-" * 50)
    
    successful_parses = 0
    for stat in channel_stats:
        if stat.get('success'):
            successful_parses += 1
            mode = "üÜï –ü–ï–†–í–´–ô" if stat.get('is_first_run') else "üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï"
            lines.append(f"‚úÖ {stat['channel']} ({mode})")
            lines.append(f"   üìù {stat['title']}")
            lines.append(f"   üì® –ù–æ–≤—ã—Ö: {stat['new_messages']}")
            lines.append(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stat['total_processed']}")
        else:
            lines.append(f"‚ùå {stat.get('channel', 'N/A')}")
            lines.append(f"   üí• {stat.get('error', 'Unknown error')}")
        lines.append("")
    
    lines.append(f"‚úÖ –£–°–ü–ï–®–ù–´–• –ü–ê–†–°–ò–ù–ì–û–í: {successful_parses}/{len(channel_stats)}")
    lines.append(f"üìà –í–°–ï–ì–û –°–û–û–ë–©–ï–ù–ò–ô –í –ë–ê–ó–ï: {parsing_stats['total_messages_parsed']}")
    lines.append(f"üåê –û–ë–†–ê–ë–û–¢–ê–ù–û –ö–ê–ù–ê–õ–û–í: {parsing_stats['total_channels']}")
    
    return "\n".join(lines)

def create_result_html(post_type, new_messages, total_messages, send_success, stats_text, post_content, data_source, first_run):
    """–°–æ–∑–¥–∞–µ—Ç HTML —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    return f"""
    <h2>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {'(–ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö)' if first_run else '(–†–ï–ì–£–õ–Ø–†–ù–´–ô –ü–ê–†–°–ò–ù–ì)'}</h2>
    
    <div style="background: #f0f8ff; padding: 15px; border-radius: 10px; margin: 10px 0;">
        <p><strong>üìä –¢–∏–ø –ø–æ—Å—Ç–∞:</strong> {post_type}</p>
        <p><strong>üì® –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:</strong> {new_messages}</p>
        <p><strong>üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</strong> {total_messages}</p>
        <p><strong>üì§ –û—Ç–ø—Ä–∞–≤–∫–∞:</strong> {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if send_success else '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å'}</p>
        <p><strong>üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:</strong> {data_source}</p>
    </div>
    
    <h3>üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h3>
    <pre style="background: #f5f5f5; padding: 15px; border-radius: 5px; overflow-x: auto;">{stats_text}</pre>
    
    <h3>üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:</h3>
    <pre style="background: #fffacd; padding: 15px; border-radius: 5px; max-height: 300px; overflow-y: auto;">{post_content}</pre>
    
    <p><strong>üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ Render Dashboard</strong></p>
    <a href="/">‚Üê –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–π</a>
    """

def get_fallback_messages():
    """–†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return [
        "OZON: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤",
        "Wildberries: –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–º–∏—Å—Å–∏—è—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏",
        "–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç: –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —ç–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∏",
        "OZON Travel: —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π",
        "WB: –Ω–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–¥–µ–∂–¥–∞",
        "OZON –ö–∞—Ä—Ç–∞: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–µ—à–±—ç–∫–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "Wildberries: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏",
        "–Ø–Ω–¥–µ–∫—Å –î–æ—Å—Ç–∞–≤–∫–∞: —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–æ–Ω—ã –ø–æ–∫—Ä—ã—Ç–∏—è —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏"
    ]
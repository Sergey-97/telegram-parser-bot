from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from config import BOT_TOKEN, TARGET_CHANNEL
from scheduler import run_scheduler_in_thread
import asyncio
import sqlite3
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = None

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/parse - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä—É—á–Ω—É—é\n"
        "/publish - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤—Ä—É—á–Ω—É—é\n"
        "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/logs - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"
    )

async def parse_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤...")
    
    try:
        from parser import parse_channels_sync
        result = parse_channels_sync()
        await update.message.reply_text(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(result) if result else 0} –ø–æ—Å—Ç–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

async def publish_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
    await update.message.reply_text("üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∏ –ø—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç...")
    
    try:
        from scheduler import BotScheduler
        scheduler = BotScheduler()
        scheduler.process_and_publish()
        await update.message.reply_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    try:
        from database import Session, Post
        session = Session()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        new_posts = session.query(Post).filter(Post.processed == False).count()
        processed_posts = session.query(Post).filter(Post.processed == True).count()
        last_post = session.query(Post).order_by(Post.created_at.desc()).first()
        
        session.close()
        
        status_text = (
            "üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {new_posts}\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {processed_posts}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {last_post.created_at if last_post else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
            f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {TARGET_CHANNEL}\n"
            f"‚Ä¢ –û–∫—Ä—É–∂–µ–Ω–∏–µ: {'Production' if os.environ.get('RENDER', False) else 'Development'}\n"
            f"‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if scheduler else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
        )
        
        await update.message.reply_text(status_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

async def logs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"""
    try:
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–æ–≤
        log_lines = []
        if os.path.exists('bot.log'):
            with open('bot.log', 'r', encoding='utf-8') as f:
                lines = f.readlines()
                log_lines = lines[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
        
        log_text = "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:**\n\n" + "".join(log_lines) if log_lines else "–õ–æ–≥–∏ –ø–æ–∫–∞ –ø—É—Å—Ç—ã"
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(log_text) > 4000:
            log_text = log_text[:4000] + "..."
            
        await update.message.reply_text(f"```\n{log_text}\n```", parse_mode='MarkdownV2')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")

async def publish_post(content):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        await application.bot.send_message(
            chat_id=TARGET_CHANNEL,
            text=content,
            parse_mode='Markdown'
        )
        logger.info(f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {TARGET_CHANNEL}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['API_ID', 'API_HASH', 'BOT_TOKEN']
    missing_vars = [var for var in required_vars if not os.environ.get(var)]
    
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
        print(f"ERROR: Missing required environment variables: {missing_vars}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        from migrate_db import setup_database
        setup_database()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("parse", parse_command))
    application.add_handler(CommandHandler("publish", publish_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("logs", logs_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    global scheduler
    scheduler = run_scheduler_in_thread()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render...")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
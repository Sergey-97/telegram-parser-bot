import asyncio
import logging
from auth_system import auth_system
from pyrogram.errors import ChannelInvalid, ChannelPrivate, UsernameNotOccupied
from database import get_last_messages, save_post, save_message, message_exists
from ai_processor import AIProcessor
from post_formatter import PostFormatter
from config import TARGET_CHANNEL, SOURCE_CHANNELS

logger = logging.getLogger(__name__)

async def run_bot_fixed():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–µ–π"""
    logger.info("=" * 60)
    logger.info("üöÄ –ó–ê–ü–£–°–ö - –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ê–Ø –°–ï–°–°–ò–Ø")
    logger.info("=" * 60)
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        logger.info("1. üîê –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –ö–õ–ò–ï–ù–¢–ê...")
        user_client = await auth_system.get_user_client()
        
        # 2. –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤
        logger.info("2. üîç –ó–ê–ü–£–°–ö –ü–ê–†–°–ò–ù–ì–ê...")
        parsing_results = await parse_channels_guaranteed(user_client)
        
        all_parsed_messages = parsing_results['messages']
        channel_stats = parsing_results['stats']
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        ai_processor = AIProcessor()
        post_formatter = PostFormatter()
        
        if all_parsed_messages:
            logger.info(f"3. üß† –°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–ê –ù–ê –û–°–ù–û–í–ï {len(all_parsed_messages)} –†–ï–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô")
            structured_content = ai_processor.structure_content(all_parsed_messages, [])
            post_type = "–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï"
        else:
            logger.info("3. üîÑ –ò–°–ü–û–õ–¨–ó–£–Æ –†–ï–ó–ï–†–í–ù–´–ô –ö–û–ù–¢–ï–ù–¢")
            recent_messages = get_last_messages(limit=10)
            if recent_messages:
                texts = [msg['text'] for msg in recent_messages if msg['text']]
                logger.info(f"   üìä –ò—Å–ø–æ–ª—å–∑—É—é {len(texts)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            else:
                texts = get_fallback_messages()
                logger.info("   üìù –ò—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            structured_content = ai_processor.structure_content(texts, [])
            post_type = "–†–ï–ó–ï–†–í–ù–´–ï –î–ê–ù–ù–´–ï"
        
        post_content = post_formatter.format_structured_post(structured_content)
        save_post(post_content)
        
        # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞
        logger.info("4. üì§ –û–¢–ü–†–ê–í–ö–ê –ü–û–°–¢–ê...")
        bot_client = await auth_system.get_bot_client()
        if bot_client:
            max_length = 4096
            if len(post_content) > max_length:
                post_content = post_content[:max_length-100] + "\n\n... (–ø–æ—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω)"
            
            await bot_client.send_message(TARGET_CHANNEL, post_content)
            logger.info(f"‚úÖ –ü–û–°–¢ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù –í {TARGET_CHANNEL}")
        else:
            logger.warning("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_message = generate_stats_message(channel_stats, len(all_parsed_messages), post_type)
        logger.info(f"üéØ –ò–¢–û–ì: {stats_message}")
        
        return f"""
        <h2>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –°–ï–°–°–ò–Ø)</h2>
        <p><strong>–¢–∏–ø –ø–æ—Å—Ç–∞:</strong> {post_type}</p>
        <p><strong>–†–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:</strong> {len(all_parsed_messages)}</p>
        <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º:</h3>
        <pre>{stats_message}</pre>
        <p><strong>‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞</strong></p>
        <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
        """
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        logger.error(f"üîç –î–ï–¢–ê–õ–ò: {traceback.format_exc()}")
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

async def parse_channels_guaranteed(user_client):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–µ–π"""
    all_messages = []
    channel_stats = {}
    
    logger.info(f"üì° –ü–ê–†–°–ò–ù–ì {len(SOURCE_CHANNELS)} –ö–ê–ù–ê–õ–û–í:")
    logger.info("=" * 50)
    
    for i, channel_url in enumerate(SOURCE_CHANNELS, 1):
        channel_messages = []
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
            if channel_url.startswith('https://t.me/'):
                channel_id = channel_url.replace('https://t.me/', '')
            elif channel_url.startswith('@'):
                channel_id = channel_url[1:]
            else:
                channel_id = channel_url
            
            logger.info(f"   {i}. üîç –ü–∞—Ä—Å–∏–º: {channel_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
            chat = await user_client.get_chat(channel_id)
            logger.info(f"      üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}")
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
            messages_count = 0
            new_messages_count = 0
            
            async for message in user_client.get_chat_history(chat.id, limit=25):
                if message.text and message.text.strip():
                    message_text = message.text.strip()
                    messages_count += 1
                    
                    if not message_exists(message_text, channel_url):
                        save_message(message_text, channel_url, 'OTHER')
                        channel_messages.append(message_text)
                        new_messages_count += 1
            
            all_messages.extend(channel_messages)
            
            channel_stats[channel_id] = {
                'title': chat.title,
                'total_messages': messages_count,
                'new_messages': new_messages_count,
                'success': True
            }
            
            if new_messages_count > 0:
                logger.info(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ {new_messages_count} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                for j, msg in enumerate(channel_messages[:2], 1):
                    logger.info(f"         üì® {j}. {msg[:80]}...")
            else:
                logger.info(f"      ‚ö†Ô∏è –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: 0")
            
        except Exception as e:
            logger.error(f"      ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            channel_stats[channel_url] = {'success': False, 'error': str(e)}
    
    logger.info("=" * 50)
    logger.info(f"üìä –í–°–ï–ì–û –ù–ê–ô–î–ï–ù–û: {len(all_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    return {
        'messages': all_messages,
        'stats': channel_stats
    }

def generate_stats_message(channel_stats, total_messages, post_type):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats_lines = []
    stats_lines.append(f"–¢–ò–ü –ü–û–°–¢–ê: {post_type}")
    stats_lines.append(f"–í–°–ï–ì–û –°–û–û–ë–©–ï–ù–ò–ô: {total_messages}")
    stats_lines.append("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–ù–ê–õ–ê–ú:")
    stats_lines.append("-" * 40)
    
    successful_channels = 0
    for channel, stats in channel_stats.items():
        if stats.get('success'):
            successful_channels += 1
            stats_lines.append(f"‚úÖ {channel}")
            stats_lines.append(f"   üì® –ù–æ–≤—ã—Ö: {stats.get('new_messages', 0)}")
        else:
            stats_lines.append(f"‚ùå {channel}")
            stats_lines.append(f"   üí• {stats.get('error', 'Unknown')}")
    
    stats_lines.append(f"–£–°–ü–ï–®–ù–´–• –ö–ê–ù–ê–õ–û–í: {successful_channels}/{len(channel_stats)}")
    
    return "\n".join(stats_lines)

def get_fallback_messages():
    """–†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return [
        "OZON: –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤",
        "Wildberries —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏",
        "–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç —ç–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫—É",
        "OZON Travel: –Ω–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        "WB –≤–≤–æ–¥–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É"
    ]
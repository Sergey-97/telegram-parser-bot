import asyncio
import logging
from pyrogram import Client
from pyrogram.errors import ChannelPrivate, ChannelInvalid, UsernameNotOccupied
from database import save_message, message_exists
from config import API_ID, API_HASH, SOURCE_CHANNELS

logger = logging.getLogger(__name__)

async def parse_single_channel(client, channel_url):
    """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –∫–∞–Ω–∞–ª"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ URL
        if channel_url.startswith('https://t.me/'):
            channel_id = channel_url.replace('https://t.me/', '')
        else:
            channel_id = channel_url
        
        logger.info(f"üîç –ü–∞—Ä—Å–∏–º: {channel_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await client.get_chat(channel_id)
        logger.info(f"   üìù –ö–∞–Ω–∞–ª: {chat.title}")
        
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages_count = 0
        new_messages_count = 0
        parsed_messages = []
        
        async for message in client.get_chat_history(chat.id, limit=10):
            if message.text and message.text.strip():
                message_text = message.text.strip()
                messages_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                if not message_exists(message_text, channel_url):
                    save_message(message_text, channel_url, 'OTHER')
                    parsed_messages.append(message_text)
                    new_messages_count += 1
        
        logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {new_messages_count} –Ω–æ–≤—ã—Ö –∏–∑ {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return {
            'channel': channel_id,
            'title': chat.title,
            'new_messages': new_messages_count,
            'total_messages': messages_count,
            'messages': parsed_messages,
            'success': True
        }
        
    except ChannelPrivate:
        logger.error(f"   ‚ùå –ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return {'success': False, 'error': 'Private channel'}
    except ChannelInvalid:
        logger.error(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return {'success': False, 'error': 'Invalid channel'}
    except UsernameNotOccupied:
        logger.error(f"   ‚ùå –ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return {'success': False, 'error': 'Username not occupied'}
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return {'success': False, 'error': str(e)}

async def parse_all_channels_simple():
    """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –£–ü–†–û–©–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê")
    logger.info("=" * 50)
    
    client = None
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é
        client = Client(
            "telegram_parser",
            api_id=API_ID,
            api_hash=API_HASH,
            workdir="/opt/render/project/src"
        )
        
        await client.start()
        me = await client.get_me()
        logger.info(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
        logger.info(f"   –¢–∏–ø: {'–ë–æ—Ç' if me.is_bot else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}")
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª—ã
        all_messages = []
        channel_stats = []
        
        for channel_url in SOURCE_CHANNELS[:3]:  # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è —Ç–µ—Å—Ç–∞
            result = await parse_single_channel(client, channel_url)
            channel_stats.append(result)
            
            if result['success'] and result['messages']:
                all_messages.extend(result['messages'])
        
        logger.info("=" * 50)
        logger.info(f"üìä –í–°–ï–ì–û –ù–ê–ô–î–ï–ù–û: {len(all_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return {
            'messages': all_messages,
            'stats': channel_stats,
            'total_messages': len(all_messages)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return {'messages': [], 'stats': [], 'total_messages': 0, 'error': str(e)}
    finally:
        if client:
            await client.stop()
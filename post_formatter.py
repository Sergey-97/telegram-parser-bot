# post_formatter.py
import logging
from typing import List, Dict
import config

logger = logging.getLogger(__name__)

class PostFormatter:
    def __init__(self):
        self.emoji_map = {
            '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π': 'üòä',
            '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π': 'üòê', 
            '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π': 'üòü'
        }
        self.marketplace_emojis = {
            'OZON': 'üü†',
            'WB': 'üîµ'
        }
    
    def format_marketplace_post(self, marketplace: str, content: Dict, source_channels: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"""
        if not content['has_ai_analysis']:
            return ""
        
        post_parts = []
        emoji = self.marketplace_emojis.get(marketplace, '‚ö™')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
        post_parts.append(f"{emoji} **{marketplace}**")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if content['main_content']:
            post_parts.append("\nüìã **–û–°–ù–û–í–ù–û–ï:**")
            for i, item in enumerate(content['main_content'][:2], 1):
                post_parts.append(f"{i}. {item}")
        
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if content['discussion_insights']:
            post_parts.append("\nüí≠ **–ú–ù–ï–ù–ò–Ø:**")
            for insight in content['discussion_insights']:
                sentiment_emoji = self.emoji_map.get(insight['sentiment'], 'üòê')
                post_parts.append(f"‚Ä¢ {sentiment_emoji} {insight['text']}")
        
        return '\n'.join(post_parts)
    
    def format_structured_post(self, structured_content: Dict, source_channels: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—â–∏–π –ø–æ—Å—Ç —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º"""
        
        post_parts = ["üöÄ **–°–í–ï–ñ–ò–ï –ù–û–í–û–°–¢–ò –ú–ê–†–ö–ï–¢–ü–õ–ï–ô–°–û–í**\n"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
        for marketplace in ['OZON', 'WB']:
            if marketplace in structured_content and structured_content[marketplace]['has_ai_analysis']:
                marketplace_post = self.format_marketplace_post(marketplace, structured_content[marketplace], source_channels)
                if marketplace_post:
                    post_parts.append(marketplace_post)
                    post_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        if post_parts and post_parts[-1] == "":
            post_parts.pop()
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
        if source_channels:
            source_names = [ch.replace('@', '').replace('https://t.me/', '') for ch in source_channels[:3]]
            post_parts.append(f"\nüì° **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** {', '.join(source_names)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_messages = sum(content.get('message_count', 0) for content in structured_content.values())
        if total_messages > 0:
            post_parts.append(f"üìä **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {total_messages}")
        
        return '\n'.join(post_parts)
    
    def format_simple_post(self, main_content: List[str], source_channels: List[str]) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)"""
        post_parts = ["üì¢ **–°–í–ï–ñ–ò–ï –ù–û–í–û–°–¢–ò**\n"]
        
        for i, content in enumerate(main_content[:3], 1):
            clean_content = content[:200] + '...' if len(content) > 200 else content
            post_parts.append(f"{i}. {clean_content}")
        
        if source_channels:
            source_names = [ch.replace('@', '').replace('https://t.me/', '') for ch in source_channels[:2]]
            post_parts.append(f"\nüì° **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** {', '.join(source_names)}")
        
        return '\n'.join(post_parts)
import json
from datetime import datetime
from config import SOURCE_CHANNELS

class PostFormatter:
    def __init__(self):
        self.current_date = datetime.now().strftime("%d.%m.%Y")
    
    def format_structured_post(self, structured_content):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø structured_content
            if isinstance(structured_content, str):
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                try:
                    structured_content = json.loads(structured_content)
                except json.JSONDecodeError:
                    # –ï—Å–ª–∏ –Ω–µ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    return self._create_simple_post(structured_content)
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (–æ–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
            if isinstance(structured_content, dict):
                return self._format_from_dict(structured_content)
            else:
                return self._create_simple_post(str(structured_content))
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
            return self._create_fallback_post()

    def _format_from_dict(self, data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        lines = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = data.get('title', f'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ {self.current_date}')
        lines.append(f"**{title}**")
        lines.append("")
        
        # –†–µ–∑—é–º–µ
        summary = data.get('summary', '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–±–∑–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö')
        lines.append(summary)
        lines.append("")
        
        # –°–µ–∫—Ü–∏–∏ –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º
        sections = data.get('sections', {})
        
        for marketplace, content in sections.items():
            if marketplace == 'OTHER':
                continue
                
            lines.append(f"**{self._get_marketplace_emoji(marketplace)} {marketplace}**")
            
            # –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
            key_points = content.get('key_points', [])
            if key_points:
                if isinstance(key_points, list):
                    for point in key_points[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤
                        lines.append(f"‚Ä¢ {point}")
                else:
                    lines.append(f"‚Ä¢ {key_points}")
            
            # –í–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            important = content.get('important', [])
            if important:
                lines.append("")
                lines.append("üí° **–í–∞–∂–Ω–æ:**")
                if isinstance(important, list):
                    for item in important[:2]:
                        lines.append(f"‚ñ™Ô∏è {item}")
                else:
                    lines.append(f"‚ñ™Ô∏è {important}")
            
            # –°–æ–≤–µ—Ç—ã
            tips = content.get('tips', [])
            if tips:
                lines.append("")
                lines.append("üë• **–°–æ–≤–µ—Ç—ã:**")
                if isinstance(tips, list):
                    for tip in tips[:2]:
                        lines.append(f"‚ñ´Ô∏è {tip}")
                else:
                    lines.append(f"‚ñ´Ô∏è {tips}")
            
            lines.append("")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = data.get('recommendations', '')
        if recommendations:
            lines.append("üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
            lines.append(recommendations)
            lines.append("")
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
        lines.append("üìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**")
        sources_text = ", ".join([f"#{channel.replace('https://t.me/', '').replace('@', '')}" 
                                for channel in SOURCE_CHANNELS[:3]])
        lines.append(sources_text)
        lines.append("")
        
        # –•–µ—à—Ç–µ–≥–∏
        lines.append("#–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ #–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã #OZON #WB #–Ω–æ–≤–æ—Å—Ç–∏")
        
        return "\n".join(lines)

    def _get_marketplace_emoji(self, marketplace):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"""
        emoji_map = {
            'OZON': 'üü†',
            'WB': 'üîµ', 
            'YANDEX': 'üü°',
            'OTHER': '‚ö™'
        }
        return emoji_map.get(marketplace, 'üîπ')

    def _create_simple_post(self, content):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø–æ—Å—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        return f"""üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ {self.current_date}

{content}

üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {", ".join(SOURCE_CHANNELS[:3])}

#–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ #–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã #OZON #WB"""

    def _create_fallback_post(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ—Å—Ç"""
        return f"""üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ {self.current_date}

üü† **OZON**
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

üîµ **WB** 
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö
‚Ä¢ –ù–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—Ä—Ç–æ—á–∫–∞–º —Ç–æ–≤–∞—Ä–æ–≤

üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö.

üìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** {", ".join(SOURCE_CHANNELS[:3])}

#–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ #–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã #OZON #WB #–Ω–æ–≤–æ—Å—Ç–∏"""
import asyncio
import logging
from telethon import TelegramClient
import config
from database import init_db, save_message
from parser import parse_channel_messages
from ai_processor import AIProcessor
from post_formatter import PostFormatter
from ai_processor_final import AIProcessorFinal

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
ai_processor = AIProcessorFinal()
post_formatter = PostFormatter()

client = TelegramClient('user_parser_session', config.API_ID, config.API_HASH)

async def publish_to_channel(message_text: str):
    """–ü—É–±–ª–∏–∫—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
    try:
        bot_client = TelegramClient('bot_publisher_session', config.API_ID, config.API_HASH)
        await bot_client.start(bot_token=config.BOT_TOKEN)
        
        channel = await bot_client.get_entity(config.TARGET_CHANNEL)
        await bot_client.send_message(channel, message_text)
        
        await bot_client.disconnect()
        logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return False

async def collect_and_process_posts():
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ AI"""
    logger.info("üß† –°–±–æ—Ä –∏ AI-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤...")
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        main_posts = []
        for source_channel in config.SOURCE_CHANNELS:
            messages = await parse_channel_messages(
                client, source_channel, 
                datetime.now() - timedelta(days=config.PARSE_INTERVAL_DAYS)
            )
            main_posts.extend([msg.text for msg in messages[:5]])  # –ë–µ—Ä–µ–º –¥–æ 5 –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–∂–¥–æ–≥–æ
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        discussion_posts = []
        for disc_channel in config.DISCUSSION_CHANNELS:
            messages = await parse_channel_messages(
                client, disc_channel,
                datetime.now() - timedelta(days=config.PARSE_INTERVAL_DAYS)
            )
            discussion_posts.extend([msg.text for msg in messages[:10]])
        
        # AI-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        structured_content = await ai_processor.structure_content(main_posts, discussion_posts)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        final_post = post_formatter.format_structured_post(
            structured_content, 
            config.SOURCE_CHANNELS + config.DISCUSSION_CHANNELS
        )
        
        return final_post
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
        return None

async def parse_and_publish_ai():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è AI-–ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI-–ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã
        structured_post = await collect_and_process_posts()
        
        if structured_post and len(structured_post) > 50:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            # –ü—É–±–ª–∏–∫—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
            success = await publish_to_channel(structured_post)
            if success:
                logger.info("üéâ AI-–ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å AI-–ø–æ—Å—Ç")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è AI-–æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ AI-–ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        init_db()
        await client.start(phone=lambda: input("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "))
        
        me = await client.get_me()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {me.first_name}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π AI-–ø–∞—Ä—Å–∏–Ω–≥
        await parse_and_publish_ai()
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        logger.info("ü§ñ AI-–ø–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚ùå AI-–ø–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
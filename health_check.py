from flask import Flask, jsonify
import threading
import logging
from datetime import datetime

app = Flask(__name__)

# –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è health check
@app.route('/')
def health_check():
    return jsonify({
        'status': 'healthy',
        'service': 'Telegram Parser Bot',
        'timestamp': datetime.now().isoformat(),
        'message': 'Bot is running successfully!'
    })

@app.route('/status')
def status():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ"""
    try:
        from database import Session, Post
        session = Session()
        
        total_posts = session.query(Post).count()
        processed_posts = session.query(Post).filter_by(processed=True).count()
        new_posts = session.query(Post).filter_by(processed=False).count()
        
        session.close()
        
        return jsonify({
            'status': 'running',
            'database': 'connected',
            'posts_total': total_posts,
            'posts_processed': processed_posts,
            'posts_new': new_posts,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

def run_health_check():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check"""
    try:
        print("üè• Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É 5000...")
        app.run(host='0.0.0.0', port=5000, debug=False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ health check —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def start_health_check():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç health check –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    health_thread = threading.Thread(target=run_health_check)
    health_thread.daemon = True
    health_thread.start()
    return health_thread
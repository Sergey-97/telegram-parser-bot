# parser.py
import asyncio
import logging
import hashlib
from pyrogram import Client
from pyrogram.errors import ChannelInvalid, ChannelPrivate, FloodWait
from datetime import datetime, timedelta
import config
from database import save_processed_message, is_message_processed, update_stats

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Parser:
    def __init__(self):
        self.app = None
    
    async def initialize(self):
        self.app = Client("parser_session", config.API_ID, config.API_HASH)
        await self.app.start()
        print("‚úÖ Pyrogram –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
    
    async def shutdown(self):
        if self.app:
            await self.app.stop()
            print("‚úÖ Pyrogram –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def detect_marketplace(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫ –∫–∞–∫–æ–º—É –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        text_lower = text.lower()
        
        for marketplace, keywords in config.MARKETPLACE_KEYWORDS.items():
            if any(keyword in text_lower for keyword in keywords):
                return marketplace
        
        return 'other'
    
    def create_message_id(self, channel: str, message_id: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return f"{channel}_{message_id}"
    
    async def parse_channel_messages(self, channel_username: str, limit: int, is_source: bool = True):
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            clean_username = channel_username.replace('https://t.me/', '').replace('@', '')
            
            print(f"üîç –ü–∞—Ä—Å–∏–º {channel_username} (–ª–∏–º–∏—Ç: {limit})...")
            
            messages_data = []
            new_messages_count = 0
            duplicate_count = 0
            
            async for message in self.app.get_chat_history(clean_username, limit=limit):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ
                if not message.text or len(message.text.strip()) < 15:
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if any(word in message.text.lower() for word in ['–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', '–ø–æ–∫–∏–Ω—É–ª', 'admin', '–∞–¥–º–∏–Ω']):
                    continue
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
                message_id = self.create_message_id(clean_username, message.id)
                if is_message_processed(message_id, clean_username):
                    duplicate_count += 1
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
                marketplace = self.detect_marketplace(message.text)
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
                clean_text = self.clean_message_text(message.text)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                messages_data.append({
                    'text': clean_text,
                    'date': message.date,
                    'channel': channel_username,
                    'message_id': message_id,
                    'marketplace': marketplace
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                save_processed_message(message_id, clean_username, clean_text, marketplace)
                new_messages_count += 1
                
                # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if new_messages_count % 5 == 0:
                    print(f"   üì® –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {new_messages_count}...")
            
            print(f"‚úÖ {channel_username}: {new_messages_count} –Ω–æ–≤—ã—Ö, {duplicate_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º
            if messages_data:
                marketplace_stats = {}
                for msg in messages_data:
                    mp = msg['marketplace']
                    marketplace_stats[mp] = marketplace_stats.get(mp, 0) + 1
                
                print(f"   üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {marketplace_stats}")
            
            return messages_data
            
        except FloodWait as e:
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {e.value} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(e.value)
            return await self.parse_channel_messages(channel_username, limit, is_source)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {channel_username}: {e}")
            return []
    
    def clean_message_text(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
        import re
        
        # –£–¥–∞–ª—è–µ–º URL
        text = re.sub(r'http\S+', '', text)
        # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
        text = re.sub(r'[^\w\s\.\!\?,:;-–∞-—è–ê-–Ø]', '', text)
        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text)
        
        return text.strip()
    
    async def parse_all_channels(self):
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏"""
        try:
            await self.initialize()
            
            print("=" * 50)
            print("üöÄ –£–ú–ù–´–ô –ü–ê–†–°–ò–ù–ì –° –†–ê–ó–î–ï–õ–ï–ù–ò–ï–ú –ü–û –ú–ê–†–ö–ï–¢–ü–õ–ï–ô–°–ê–ú")
            print("=" * 50)
            
            all_data = {'sources': [], 'discussions': []}
            marketplace_counts = {'total': 0, 'OZON': 0, 'WB': 0, 'other': 0}
            
            # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º
            print(f"\nüìã –û–°–ù–û–í–ù–´–ï –ö–ê–ù–ê–õ–´ (–ª–∏–º–∏—Ç: {config.SOURCE_LIMIT}):")
            for channel in config.SOURCE_CHANNELS:
                messages = await self.parse_channel_messages(channel, config.SOURCE_LIMIT, is_source=True)
                all_data['sources'].extend(messages)
                
                # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                for msg in messages:
                    marketplace_counts['total'] += 1
                    marketplace_counts[msg['marketplace']] = marketplace_counts.get(msg['marketplace'], 0) + 1
            
            # –ü–∞—Ä—Å–∏–º –¥–æ–ø. –∫–∞–Ω–∞–ª—ã —Å –º–µ–Ω—å—à–∏–º –ª–∏–º–∏—Ç–æ–º
            print(f"\nüí¨ –î–û–ü. –ö–ê–ù–ê–õ–´ (–ª–∏–º–∏—Ç: {config.DISCUSSION_LIMIT}):")
            for channel in config.DISCUSSION_CHANNELS:
                messages = await self.parse_channel_messages(channel, config.DISCUSSION_LIMIT, is_source=False)
                all_data['discussions'].extend(messages)
                
                # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                for msg in messages:
                    marketplace_counts['total'] += 1
                    marketplace_counts[msg['marketplace']] = marketplace_counts.get(msg['marketplace'], 0) + 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            update_stats(marketplace_counts)
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"\nüìà –ò–¢–û–ì–ò –ü–ê–†–°–ò–ù–ì–ê:")
            print(f"   üìä –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {marketplace_counts['total']}")
            print(f"   üü† OZON: {marketplace_counts['OZON']}")
            print(f"   üîµ WB: {marketplace_counts['WB']}")
            print(f"   ‚ö™ –î—Ä—É–≥–∏–µ: {marketplace_counts['other']}")
            print(f"   üìã –û—Å–Ω–æ–≤–Ω—ã–µ: {len(all_data['sources'])}")
            print(f"   üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏—è: {len(all_data['discussions'])}")
            
            return all_data
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return {'sources': [], 'discussions': []}
        finally:
            await self.shutdown()
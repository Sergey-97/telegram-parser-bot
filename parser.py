import asyncio
from pyrogram import Client
from database import save_message, message_exists
from ai_processor import AIProcessor
from config import SOURCE_CHANNELS, MAIN_CHANNELS_LIMIT, DISCUSSION_CHANNELS_LIMIT

class TelegramParser:
    def __init__(self, client: Client):
        self.client = client
        self.ai_processor = AIProcessor()
        
    async def parse_channel(self, channel_url, limit=20):
        """–ü–∞—Ä—Å–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            print(f"üîç –ü–∞—Ä—Å–∏–º {channel_url} (–ª–∏–º–∏—Ç: {limit})...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username/id –∫–∞–Ω–∞–ª–∞ –∏–∑ URL
            if channel_url.startswith('https://t.me/'):
                channel_identifier = channel_url.replace('https://t.me/', '')
            else:
                channel_identifier = channel_url
                
            messages = []
            new_messages_count = 0
            duplicate_count = 0
            
            async for message in self.client.get_chat_history(channel_identifier, limit=limit):
                if message.text:
                    message_text = message.text
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ
                    if not message_exists(message_text, channel_url):
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
                        marketplace = self.ai_processor.analyze_marketplace(message_text, channel_url)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                        save_message(message_text, channel_url, marketplace)
                        messages.append(message_text)
                        new_messages_count += 1
                    else:
                        duplicate_count += 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            marketplace_stats = {}
            if new_messages_count > 0:
                for msg in messages:
                    marketplace = self.ai_processor.analyze_marketplace(msg)
                    marketplace_stats[marketplace] = marketplace_stats.get(marketplace, 0) + 1
                
                print(f"‚úÖ {channel_url}: {new_messages_count} –Ω–æ–≤—ã—Ö, {duplicate_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
                if marketplace_stats:
                    print(f"   üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {marketplace_stats}")
            else:
                print(f"‚úÖ {channel_url}: {new_messages_count} –Ω–æ–≤—ã—Ö, {duplicate_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            
            return {
                'channel': channel_url,
                'new_messages': new_messages_count,
                'duplicates': duplicate_count,
                'messages': messages,
                'marketplace_stats': marketplace_stats
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {channel_url}: {e}")
            return {
                'channel': channel_url,
                'new_messages': 0,
                'duplicates': 0,
                'messages': [],
                'marketplace_stats': {},
                'error': str(e)
            }

    async def parse_all_channels(self):
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üìã –û–°–ù–û–í–ù–´–ï –ö–ê–ù–ê–õ–´ (–ª–∏–º–∏—Ç: {}):".format(MAIN_CHANNELS_LIMIT))
        
        results = []
        total_new_messages = 0
        total_duplicates = 0
        marketplace_totals = {'OZON': 0, 'WB': 0, 'YANDEX': 0, 'OTHER': 0}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–ø–µ—Ä–≤—ã–µ 3)
        main_channels = SOURCE_CHANNELS[:3]
        for channel in main_channels:
            result = await self.parse_channel(channel, MAIN_CHANNELS_LIMIT)
            result['type'] = 'main'
            results.append(result)
            total_new_messages += result['new_messages']
            total_duplicates += result['duplicates']
            
            # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º
            for marketplace, count in result['marketplace_stats'].items():
                marketplace_totals[marketplace] += count
        
        print("\nüí¨ –î–û–ü. –ö–ê–ù–ê–õ–´ (–ª–∏–º–∏—Ç: {}):".format(DISCUSSION_CHANNELS_LIMIT))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–æ—Å—Ç–∞–ª—å–Ω—ã–µ)
        discussion_channels = SOURCE_CHANNELS[3:]
        for channel in discussion_channels:
            result = await self.parse_channel(channel, DISCUSSION_CHANNELS_LIMIT)
            result['type'] = 'discussion'
            results.append(result)
            total_new_messages += result['new_messages']
            total_duplicates += result['duplicates']
            
            # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º
            for marketplace, count in result['marketplace_stats'].items():
                marketplace_totals[marketplace] += count
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        print("\nüìà –ò–¢–û–ì–ò –ü–ê–†–°–ò–ù–ì–ê:")
        print(f"   üìä –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {total_new_messages}")
        print(f"   üü† OZON: {marketplace_totals['OZON']}")
        print(f"   üîµ WB: {marketplace_totals['WB']}")
        print(f"   üü° YANDEX: {marketplace_totals['YANDEX']}")
        print(f"   ‚ö™ –î—Ä—É–≥–∏–µ: {marketplace_totals['OTHER']}")
        
        main_messages = sum(r['new_messages'] for r in results if r['type'] == 'main')
        discussion_messages = sum(r['new_messages'] for r in results if r['type'] == 'discussion')
        print(f"   üìã –û—Å–Ω–æ–≤–Ω—ã–µ: {main_messages}")
        print(f"   üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏—è: {discussion_messages}")
        
        return {
            'results': results,
            'total_new_messages': total_new_messages,
            'total_duplicates': total_duplicates,
            'marketplace_totals': marketplace_totals
        }
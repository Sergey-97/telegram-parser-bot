import asyncio
import logging
from pyrogram import Client
from config import API_ID, API_HASH, BOT_TOKEN, SOURCE_CHANNELS

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def debug_channel_access():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º"""
    client = Client(
        "debug_bot", 
        api_id=API_ID, 
        api_hash=API_HASH,
        bot_token=BOT_TOKEN,
        workdir="./"
    )
    
    try:
        await client.start()
        me = await client.get_me()
        logger.info(f"ü§ñ –ë–æ—Ç: @{me.username} (ID: {me.id})")
        logger.info("=" * 60)
        
        for i, channel_url in enumerate(SOURCE_CHANNELS, 1):
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
                if channel_url.startswith('https://t.me/'):
                    channel_id = channel_url.replace('https://t.me/', '')
                elif channel_url.startswith('@'):
                    channel_id = channel_url[1:]
                else:
                    channel_id = channel_url
                
                logger.info(f"{i}. üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: {channel_id}")
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                chat = await client.get_chat(channel_id)
                logger.info(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}")
                logger.info(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {getattr(chat, 'members_count', 'N/A')}")
                logger.info(f"   üîí –¢–∏–ø: {chat.type}")
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                messages_found = 0
                message_samples = []
                
                async for message in client.get_chat_history(chat.id, limit=5):
                    if message.text and message.text.strip():
                        messages_found += 1
                        if len(message_samples) < 2:
                            message_samples.append(message.text[:100])
                
                logger.info(f"   üì® –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_found}")
                if message_samples:
                    for j, sample in enumerate(message_samples, 1):
                        logger.info(f"      {j}. {sample}...")
                
                if messages_found == 0:
                    logger.info("   ‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    logger.info("      - –ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π")
                    logger.info("      - –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
                    logger.info("      - –í –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                logger.info("   " + "-" * 40)
                
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {str(e)}")
                logger.info("   ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
                logger.info("      - –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                logger.info("      - –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è")
                logger.info("      - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username –∫–∞–Ω–∞–ª–∞")
                logger.info("   " + "-" * 40)
        
        logger.info("=" * 60)
        logger.info("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        logger.info("1. –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ username –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
        logger.info("2. –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
        logger.info("3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é –≤–º–µ—Å—Ç–æ –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await client.stop()

if __name__ == "__main__":
    asyncio.run(debug_channel_access())